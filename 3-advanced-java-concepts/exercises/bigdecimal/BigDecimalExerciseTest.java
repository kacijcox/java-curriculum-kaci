package bigdecimal;

import org.junit.Assert;
import org.junit.Test;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class BigDecimalExerciseTest {

    BigDecimalExercise instance = new BigDecimalExercise();

    @Test
    public void add() {

        String[][] testCases = {
                {"5.55", "-22", "34.567"},
                {"1", "0", "1.33333"},
                {"0", "0", "0"},
                {"999999999999", "999999999999", "999999999999"},
                {"0.99999999999999", "-0.03", "34.567"}
        };

        for (String[] args : testCases) {
            BigDecimal a = new BigDecimal(args[0]);
            BigDecimal b = new BigDecimal(args[1]);
            BigDecimal c = new BigDecimal(args[2]);
            Assert.assertEquals(a.add(b).add(c), instance.add(a, b, c));
        }
    }

    @Test
    public void divideWithTwoDecimalPlaces() {

        String[][] testCases = {
                {"100", "10"},
                {"2.0", "3.0"},
                {"999999999999", "3.333333"},
                {"87388", "5.0"},
                {"-4.35333", "0.02"}
        };

        for (String[] args : testCases) {
            BigDecimal a = new BigDecimal(args[0]);
            BigDecimal b = new BigDecimal(args[1]);
            Assert.assertEquals(a.divide(b, 2, RoundingMode.HALF_UP), instance.divideWithTwoDecimalPlaces(a, b));
        }
    }

    @Test
    public void sum() {

        BigDecimal[] values = {
                new BigDecimal("2.2"),
                new BigDecimal("3.3"),
                new BigDecimal("4.4")
        };
        Assert.assertEquals(new BigDecimal("9.9"), instance.sum(values));

        values = new BigDecimal[]{
                new BigDecimal("22.2"),
                new BigDecimal("3.3"),
                new BigDecimal("-4.4454"),
                new BigDecimal("493.4"),
                new BigDecimal("-999999.4")
        };
        Assert.assertEquals(new BigDecimal("-999484.9454"), instance.sum(values));
    }

    @Test
    public void average() {

        BigDecimal[] values = {
                new BigDecimal("2.2"),
                new BigDecimal("3.3"),
                new BigDecimal("4.4")
        };
        Assert.assertEquals(new BigDecimal("3.3000"), instance.average(values));

        values = new BigDecimal[]{
                new BigDecimal("22.2"),
                new BigDecimal("3.3"),
                new BigDecimal("-4.4454"),
                new BigDecimal("493.4"),
                new BigDecimal("-999999.4")
        };
        Assert.assertEquals(new BigDecimal("-199896.9891"), instance.average(values));
    }

    @Test
    public void calculateInterest() {
        BigDecimal i = new BigDecimal("100.00");
        BigDecimal r = new BigDecimal("0.05");
        int period = 10;
        Assert.assertEquals(new BigDecimal("62.8894626777441406250000"),
                instance.calculateInterest(i, r, period));

        i = new BigDecimal("100.00");
        r = new BigDecimal("0.005");
        period = 100;

        Assert.assertEquals(new BigDecimal("64.66684921165446282600673335123931068636055297235559730494365670074806678793038501503954025479940888857370500729080076780554430721826199146327979633203102407758893561302559105604558776903373608566322190677726181816051497840747769335953297720195021627769780278929823147393562976503744721412658691406250000"),
                instance.calculateInterest(i, r, period));

        i = new BigDecimal("100.00");
        r = new BigDecimal("0.0001");
        period = 1000;

        Assert.assertEquals(new BigDecimal("10.516539260323269724018424010905853746478941966494967340365546857834674694990737819127901728507660913010906697848924848118806192731631499736451017955465657967365185367804485489241662720004289651617935740747365122241827948557966657042550431010663117305965481281122051214217228403920142098550253848471341987321910992801669688511417324019659317307833173367911689717300301025726918562201358496717347315707759480281997753127146542300187549223786812261490841452263800985876826268793730562957112871296076769486845903315216644317839617026006676215861508996627527078267421293979825447854096699006916639065004476012102576026503544757412180850123760665403799554793964629979127015818138914675696744049171960922533331194104997906510356101533419528390480227879533013466397784625870223456197674585154919471118485743841111540620321401540426830756250405753702329512549711365975466337397848061608646110130973821673394232018460696751163202887828486929254360740724366261203938217549469206764156833447975777772308360943803785857094144066787910714618828234195263207182246425894220453605512636801049287110434231012068759750426788973186157708088279370852515025207826123926128574167939431904553535146804243042423841168786737953121260905033944926466172434955160918475721140095427007578838626713711573925903035677579590796073578030942906301384982042818168753523223596393733249016857247655046945485918249824391638389120095612261580560705665911342256513059334209135814417518604033449536305007460204209169438412917844909779159338691186197160090993426323777818310277480458229217959033945636543024266055395151817594754581859589628548325838438696613137041253169396988594047292887574212890080517537442439735781466842724218899354176874729889651501819241746203079201708600537570768089642333746273399822744993690622167629774720139446041424578449176636776271552913620584403492280723749902019828342827919704597800298858410197651910465906399945392376252660582178458313027554000155595213858213654312841687460178428138527590080959044882372823077853435049826330717775734132750310253667558139942361015582189436378352250828307946769742964094923911181121395634387904996823110926524047624688421820554316620595976483048085891319466017412685255326719523665453628293412361206034932157287663633768636098143744988142172313165793193829248669242110524895052298611957862919307533272639162298639729098933627241231054305789260060169734053878478509484901535380894041353627650656474500030289843291192447117255359432033755164543699988384079248525861440345510713327715801703398021071307740147058437288167174560789295745293041685894339347817977272086260736556005888600882997675769947040799284303096258848869458035814318630852430935111304745981627064174760983989524849117662571614077129904415191355202891772141827794412696869363988091681357158597048986340535701296030478162859382097678177805682707397091852686695407126179242986500016042264331132153356887289233591101211841919813946081266178889345662631928729479743738943006870045291268616257258929575507833651701752108789984659116271747668847597942170262084963921753580260178008882743794530592972038621337898250332886617933047751579166893242080438087066593699828132871109408162747717311065737004168945982453175965885336408115149645381319781574159617844080051420048705411993730890838979613418266056119814549958158744501228465055183779053649144563994090890974619391981723544933351363763436606257444844398768352593957057777681732217793197370935283442909494382792410838631454762991345440828514615856914589891474007158870358711276626696205435594031112322609945929919104596376707144367504409319799534394481485005056072818429067738957280281355436163857580625080680013095741888657396987165526531956799464217836458024973131789590000412795522222797274781031120587933530839073975086128004774780346771264333932841994754576909885559429474948674818145546779167542948676006003924618493426750316827215572434915348288749496014336533143026668036894973502148339428635969489981988823697385232413958545540210391914136670499500100000010000"),
                instance.calculateInterest(i, r, period));

    }

}